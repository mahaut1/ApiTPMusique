<?php

namespace App\Security;

use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use App\Repository\UserRepository;
use Lcobucci\JWT\Builder;
use Lcobucci\JWT\Signer\Hmac\Sha256;
use Lcobucci\JWT\Signer\Key;

class ApiAuthenticator extends AbstractGuardAuthenticator
{
    private UserRepository $userRepository;

    public function __construct(UserRepository $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    public function start(Request $request, AuthenticationException $authException = null): JsonResponse
    {
        return new JsonResponse(['message' => 'Authentication Required'], Response::HTTP_UNAUTHORIZED);
    }

    public function supports(Request $request): bool
    {
        return $request->isMethod('POST') && $request->getPathInfo() === '/api/login';
    }

    public function getCredentials(Request $request): array
    {  
        $email = $request->request->get('email');
        return [
            'email' => $email,
        ];
    }

    public function getUser($credentials, UserProviderInterface $userProvider): ?UserInterface
    {
        $email = $credentials['email'];
        $user = $userProvider->loadUserByIdentifier($email); 
        return $user;
    }

    public function checkCredentials($credentials, UserInterface $user): bool
    {
        $email = $credentials['email'];
        $user = $this->userRepository->findOneBy(['email' => $email]);        
        return $user !== null;
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): JsonResponse
    {
        return new JsonResponse(['message' => $exception->getMessage()], Response::HTTP_FORBIDDEN);
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $providerKey): ?Response
    {
        $user = $token->getUser();
        
        $secretKeyString = getenv('SECRET_KEY');
        $secretKey = new Key($secretKeyString);

        $signer = new Sha256();
        $token = (new Builder())
            ->setIssuer('ApiTpMusique')
            ->setAudience('YourAudience')
            ->setId('your_token_id', true)
            ->setIssuedAt(time())
            ->setExpiration((new \DateTime())->modify('+1 hour')->getTimestamp())
            ->set('user_id', $user->getId())
            ->set('email', $user->getEmail())
            ->sign($signer, $secretKey)
            ->getToken();

        return new JsonResponse(['token' => (string) $token]);
    }

    public function supportsRememberMe(): bool
    {
        // Indique si cette m√©thode prend en charge "Remember Me"
    }
}
